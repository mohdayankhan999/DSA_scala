object Solution {
    object Solution {
    def numIslands(grid: Array[Array[Char]]): Int = {
        
        val m = grid.length
        val n = grid(0).length

        def dfs(row: Int, col: Int): Unit = {
            if(row < 0 || row >= m || col < 0 || col >= n || grid(row)(col).equals('0')) ()
            else {
                grid(row)(col) = '0'
                for {
                    dirX <- (-1 to 1)
                    dirY <- (-1 to 1)
                    if dirX.abs != dirY.abs
                } dfs(row + dirX, col + dirY)
            }
        }

        val islands = for {
            row <- (0 until m)
            col <- (0 until n)
            if(grid(row)(col).equals('1'))
        } yield dfs(row, col)

        islands.length
    }
}
}
